#
# DCMotorServer: EPICS database for DCMotorServer Arduino code
#
# ===== ============================
# macro meaning
# ===== ============================
# P     prefix for this database
# PORT  asyn port to be used
# ===== ============================

record(stringin, "$(P)id") {
    field(DESC, "device identification")
    field(DTYP, "stream")
    field(INP,  "@DCMotorServer.proto id $(PORT)")
    field(PINI, "1")
}

record(stringin, "$(P)version") {
    field(DESC, "firmware version")
    field(DTYP, "stream")
    field(INP,  "@DCMotorServer.proto version $(PORT)")
    field(PINI, "1")
}

record(stringout, "$(P)cmd") {
    field(DESC, "command interface")
    field(DTYP, "stream")
    field(OUT,  "@DCMotorServer.proto debug $(PORT)")
}

record(bo, "$(P)stop") {
    field(DESC, "STOP all motion")
    field(DTYP, "stream")
    field(OUT,  "@DCMotorServer.proto stop $(PORT)")
    field(FLNK, "$(P)moving.PROC")
}

record(bi, "$(P)moving_poll") {
    field(SCAN, ".1 second")
    field(FLNK, "$(P)moving.PROC")
}

record(bi, "$(P)moving") {
    field(DESC, "Is motor in motion?")
    field(DTYP, "stream")
    field(INP,  "@DCMotorServer.proto moving $(PORT)")
    field(PINI, "1")
    field(ZNAM, "NO")
    field(ONAM, "YES")
    #field(SCAN, "0.2 second")
    field(FLNK, "$(P)motor_number.PROC")
}

record(mbbi, "$(P)motor_number") {
    field(DESC, "this motor number is moving")
    field(DTYP, "stream")
    field(INP,  "@DCMotorServer.proto motor_number $(PORT)")
    field(PINI, "1")
    field(ZRST, "None")
    field(ONST, "m1")
    field(TWST, "m2")
    field(THST, "m3")
    field(FRST, "m4")
    #field(SCAN, "0.2 second")
}

record(ao, "$(P)ramp_time") {
    field(DESC, "acceleration time")
    field(EGU,  "s")
    field(PREC, "3")
    field(DTYP, "stream")
    field(OUT,  "@DCMotorServer.proto ramp_time $(PORT)")
    field(AOFF, "0")
    field(ASLO, "0.001")  # ms units
}

record(ao, "$(P)v_top") {
    field(DESC, "top speed")
    field(EGU,  "VDC")
    field(PREC, "3")
    field(DTYP, "stream")
    field(OUT,  "@DCMotorServer.proto v_top $(PORT)")
    field(AOFF, "0")
    field(ASLO, "0.047058823529411764")  # 12 VDC per 255 ADC values (12/255)
    field(HOPR, "12.0")   # 12 VDC full scale
    field(LOPR, "0.0")    # 0 VDC minimum
    field(DRVH, "12.0")   # 12 VDC full scale
    field(DRVL, "0.0")    # 0 VDC minimum
    field(VAL,  "12.0")   # default starting value
}

record(ao, "$(P)v_base") {
    field(DESC, "starting (base) speed")
    field(EGU,  "VDC")
    field(PREC, "3")
    field(DTYP, "stream")
    field(OUT,  "@DCMotorServer.proto v_base $(PORT)")
    field(AOFF, "0")
    field(ASLO, "0.047058823529411764")  # 12 VDC per 255 ADC values (12/255)
    field(HOPR, "12.0")   # 12 VDC full scale
    field(LOPR, "0.0")    # 0 VDC minimum
    field(DRVH, "12.0")   # 12 VDC full scale
    field(DRVL, "0.0")    # 0 VDC minimum
    field(VAL,  "0.0")    # default starting value
}

# TODO: use a template .db for this!

record(ao, "$(P)m1") {
    field(DESC, "motor 1 timed move")
    field(EGU,  "s")
    field(PREC, "2")
    field(DTYP, "stream")
    field(OUT,  "@DCMotorServer.proto dcm_move(1) $(PORT)")
    field(AOFF, "0")
    field(ASLO, "0.001")  # ms units
    field(FLNK, "$(P)moving.PROC")
}

record(ao, "$(P)m1:step:size") {
    field(DESC, "motor 1 step size")
    field(EGU,  "s")
    field(PREC, "2")
    field(VAL,  "1")
}

record(calcout, "$(P)m1:step:change") {
  field(DESC, "change step size")
  field(CALC, "min(max(abs(a)*b,c),d)")
  # field(A,    MULTIPLIER)		# <-- write to this field: either 10 or 0.1
  field(INPB, "$(P)m1:step:size")
  field(C,    "0.01")			# minimum move time: 10 ms
  field(D,    "300")			# maximum move time: 5 min
  field(OUT, "$(P)m1:step:size")
  field(FLNK, "$(P)m1:step:size")
}

record(calcout, "$(P)m1:step") {	# move motor positive or negative
  field(DESC, "move m1 by step size")
  field(CALC, "A>=0?B:-B")
  # field(A,    MULTIPLIER)		# <-- write to this field: either positive, zero, or negative number
  field(INPB, "$(P)m1:step:size")
  field(OUT,  "$(P)m1")
  field(FLNK, "$(P)m1")
}

record(ao, "$(P)m2") {
    field(DESC, "motor 2 timed move")
    field(EGU,  "s")
    field(PREC, "2")
    field(DTYP, "stream")
    field(OUT,  "@DCMotorServer.proto dcm_move(2) $(PORT)")
    field(AOFF, "0")
    field(ASLO, "0.001")  # ms units
    field(FLNK, "$(P)moving.PROC")
}

record(ao, "$(P)m2:step:size") {
    field(DESC, "motor 2 step size")
    field(EGU,  "s")
    field(PREC, "2")
    field(VAL,  "1")
}

record(calcout, "$(P)m2:step:change") {
  field(DESC, "change step size")
  field(CALC, "min(max(abs(a)*b,c),d)")
  # field(A,    MULTIPLIER)		# <-- write to this field: either 10 or 0.1
  field(INPB, "$(P)m2:step:size")
  field(C,    "0.01")			# minimum move time: 10 ms
  field(D,    "300")			# maximum move time: 5 min
  field(OUT, "$(P)m2:step:size")
  field(FLNK, "$(P)m2:step:size")
}

record(calcout, "$(P)m2:step") {	# move motor positive or negative
  field(DESC, "move m2 by step size")
  field(CALC, "A>=0?B:-B")
  # field(A,    MULTIPLIER)		# <-- write to this field: either positive, zero, or negative number
  field(INPB, "$(P)m2:step:size")
  field(OUT,  "$(P)m2")
  field(FLNK, "$(P)m2")
}

record(ao, "$(P)m3") {
    field(DESC, "motor 3 timed move")
    field(EGU,  "s")
    field(PREC, "2")
    field(DTYP, "stream")
    field(OUT,  "@DCMotorServer.proto dcm_move(3) $(PORT)")
    field(AOFF, "0")
    field(ASLO, "0.001")  # ms units
    field(FLNK, "$(P)moving.PROC")
}

record(ao, "$(P)m3:step:size") {
    field(DESC, "motor 3 step size")
    field(EGU,  "s")
    field(PREC, "2")
    field(VAL,  "1")
}

record(calcout, "$(P)m3:step:change") {
  field(DESC, "change step size")
  field(CALC, "min(max(abs(a)*b,c),d)")
  # field(A,    MULTIPLIER)		# <-- write to this field: either 10 or 0.1
  field(INPB, "$(P)m3:step:size")
  field(C,    "0.01")			# minimum move time: 10 ms
  field(D,    "300")			# maximum move time: 5 min
  field(OUT, "$(P)m3:step:size")
  field(FLNK, "$(P)m3:step:size")
}

record(calcout, "$(P)m3:step") {	# move motor positive or negative
  field(DESC, "move m3 by step size")
  field(CALC, "A>=0?B:-B")
  # field(A,    MULTIPLIER)		# <-- write to this field: either positive, zero, or negative number
  field(INPB, "$(P)m3:step:size")
  field(OUT,  "$(P)m3")
  field(FLNK, "$(P)m3")
}

record(ao, "$(P)m4") {
    field(DESC, "motor 4 timed move")
    field(EGU,  "s")
    field(PREC, "2")
    field(DTYP, "stream")
    field(OUT,  "@DCMotorServer.proto dcm_move(4) $(PORT)")
    field(AOFF, "0")
    field(ASLO, "0.001")  # ms units
    field(FLNK, "$(P)moving.PROC")
}

record(ao, "$(P)m4:step:size") {
    field(DESC, "motor 4 step size")
    field(EGU,  "s")
    field(PREC, "2")
    field(VAL,  "1")
}

record(calcout, "$(P)m4:step:change") {
  field(DESC, "change step size")
  field(CALC, "min(max(abs(a)*b,c),d)")
  # field(A,    MULTIPLIER)		# <-- write to this field: either 10 or 0.1
  field(INPB, "$(P)m4:step:size")
  field(C,    "0.01")			# minimum move time: 10 ms
  field(D,    "300")			# maximum move time: 5 min
  field(OUT, "$(P)m4:step:size")
  field(FLNK, "$(P)m4:step:size")
}

record(calcout, "$(P)m4:step") {	# move motor positive or negative
  field(DESC, "move m4 by step size")
  field(CALC, "A>=0?B:-B")
  # field(A,    MULTIPLIER)		# <-- write to this field: either positive, zero, or negative number
  field(INPB, "$(P)m4:step:size")
  field(OUT,  "$(P)m4")
  field(FLNK, "$(P)m4")
}

record(ai, "$(P)ai0") {
    field(DESC, "V_photocell, raw")
    field(EGU,  "VDC")
    field(PREC, "3")
    field(DTYP, "stream")
    field(INP,  "@DCMotorServer.proto ai(0) $(PORT)")
    field(SCAN, ".5 second")
    field(AOFF, "0")
    field(ASLO, "0.004887585532746823069403714565")  # 5 VDC / 1023 ADC units
    field(HOPR, "5")
    field(LOPR, "0")
}

record(ai, "$(P)ai0:mean") {
    field(DESC, "V_photocell")
    field(EGU,  "VDC")
    field(PREC, "5")
    field(DTYP, "stream")
    field(INP,  "@DCMotorServer.proto ai_mean(0) $(PORT)")
    field(SCAN, ".5 second")
    field(AOFF, "0")
    field(ASLO, "0.000004887585532746823069403714565")  # 5 VDC / 1023 ADC units / 1000 multiplier
    field(HOPR, "5")
    field(LOPR, "0")
}

record(ai, "$(P)ai1") {
    field(DESC, "V_LED, raw")
    field(EGU,  "VDC")
    field(PREC, "3")
    field(DTYP, "stream")
    field(INP,  "@DCMotorServer.proto ai(1) $(PORT)")
    field(SCAN, ".5 second")
    field(AOFF, "0")
    field(ASLO, "0.004887585532746823069403714565")  # 5 VDC / 1023 ADC units
    field(HOPR, "5")
    field(LOPR, "0")
}

record(ai, "$(P)ai1:mean") {
    field(DESC, "V_LED")
    field(EGU,  "VDC")
    field(PREC, "5")
    field(DTYP, "stream")
    field(INP,  "@DCMotorServer.proto ai_mean(1) $(PORT)")
    field(SCAN, ".5 second")
    field(AOFF, "0")
    field(ASLO, "0.000004887585532746823069403714565")  # 5 VDC / 1023 ADC units / 1000 multiplier
    field(HOPR, "5")
    field(LOPR, "0")
}

record(ai, "$(P)ai2") {
    field(DESC, "V_thermistor, raw")
    field(EGU,  "VDC")
    field(PREC, "3")
    field(DTYP, "stream")
    field(INP,  "@DCMotorServer.proto ai(2) $(PORT)")
    field(SCAN, ".5 second")
    field(AOFF, "0")
    field(ASLO, "0.004887585532746823069403714565")  # 5 VDC / 1023 ADC units
    field(HOPR, "5")
    field(LOPR, "0")
}

record(ai, "$(P)ai2:mean") {
    field(DESC, "V_thermistor")
    field(EGU,  "VDC")
    field(PREC, "5")
    field(DTYP, "stream")
    field(INP,  "@DCMotorServer.proto ai_mean(2) $(PORT)")
    field(SCAN, ".5 second")
    field(AOFF, "0")
    field(ASLO, "0.000004887585532746823069403714565")  # 5 VDC / 1023 ADC units / 1000 multiplier
    field(HOPR, "5")
    field(LOPR, "0")
}

record(ai, "$(P)ai3:mean") {
    field(DESC, "V_ref for thermistor")
    field(EGU,  "VDC")
    field(PREC, "5")
    field(DTYP, "stream")
    field(INP,  "@DCMotorServer.proto ai_mean(3) $(PORT)")
    field(SCAN, ".5 second")
    field(AOFF, "0")
    field(ASLO, "0.000004887585532746823069403714565")  # 5 VDC / 1023 ADC units / 1000 multiplier
    field(HOPR, "5")
    field(LOPR, "0")
}

# record(ao, "$(P)pwm6") {
#     field(DESC, "PWM output 6")
#     field(EGU,  "VDC")
#     field(PREC, "2")
#     field(DTYP, "stream")
#     field(OUT,  "@DCMotorServer.proto pwm(6) $(PORT)")
#     field(AOFF, "0")
#     field(ASLO, "0.01960784313725490196078431372549")  # 5 VDC / 255 ADC units
#     field(HOPR, "5")
#     field(LOPR, "0")
#     field(DRVH, "5")
#     field(DRVL, "0")
# }

record(ao, "$(P)pwm11") {
    field(DESC, "LED")
    field(EGU,  "VDC")
    field(PREC, "2")
    field(DTYP, "stream")
    field(OUT,  "@DCMotorServer.proto pwm(11) $(PORT)")
    field(AOFF, "0")
    field(ASLO, "0.01960784313725490196078431372549")  # 5 VDC / 255 ADC units
    field(HOPR, "5")
    field(LOPR, "0")
    field(DRVH, "5")
    field(DRVL, "0")
}

record(ai, "$(P)rate") {
    field(DESC, "update rate")
    field(EGU,  "1/s")
    field(DTYP, "stream")
    field(INP,  "@DCMotorServer.proto rate $(PORT)")
    field(SCAN, ".5 second")
}

record(ao, "$(P)period") {
    field(DESC, "averaging period")
    field(VAL,  "0.5")
    field(PREC, "2")
    field(PINI, "1")
    field(EGU,  "s")
    field(DTYP, "stream")
    field(OUT,  "@DCMotorServer.proto period $(PORT)")
    field(AOFF, "0")
    field(ASLO, "0.001")  # raw units are milliseconds
    field(HOPR, "1000.000")
    field(LOPR, "0.005")
    field(DRVH, "1000.000")
    field(DRVL, "0.005")
}
